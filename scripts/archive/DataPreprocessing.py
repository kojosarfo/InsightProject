{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This script reads the raw csv dumps of pedestrian and cyclist traffic volumes and weather data, cleans and aggregate the data into 1 hour intervals."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import os\n",
    "import pickle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_data():\n",
    "    \n",
    "    #Traffic data\n",
    "    ToTraffic = pd.read_csv(os.getcwd() + '/cycped_vol.csv', low_memory = False);\n",
    "    dateTimes = pd.to_datetime((ToTraffic['datetime_bin']), dayfirst = True);\n",
    "    ToTraffic.insert(2,'DateTimes', dateTimes);\n",
    "    \n",
    "    # Weather data\n",
    "    ToWeather = pd.read_csv(os.getcwd() + '/weather.csv', low_memory = False)\n",
    "    weatherTimes = pd.to_datetime((ToWeather['date_time']), dayfirst = True);\n",
    "    ToWeather['date_time'] = weatherTimes.dt.round('H');\n",
    "    \n",
    "    Intersections = np.unique(ToTraffic['intersection_uid']);\n",
    "    \n",
    "    Peds=[]; Cycs=[];\n",
    "    for IntID in Intersections:\n",
    "        #print(IntID)\n",
    "        \n",
    "        CycsPeds = ToTraffic[ToTraffic['intersection_uid'] == IntID];\n",
    "        \n",
    "        # For pedestrians\n",
    "        Pedestrians = CycsPeds[CycsPeds['classification_uid'] == 6] \n",
    "        #6 represents pedestrians\n",
    "        \n",
    "        #Aggregating traffic volume in all directions of travel \n",
    "        #and all legs for a given timestamp\n",
    "        grouped = Pedestrians.groupby('DateTimes');\n",
    "        groupA = grouped.sum();\n",
    "        groupA = groupA['volume']; \n",
    "        groupB = grouped.first(); \n",
    "        groupB = groupB.iloc[:, 0:groupB.shape[1]-1];\n",
    "        Pedestrians = pd.concat([groupB, groupA], axis=1, sort=False)\n",
    "        \n",
    "        #Aggregating volumes for 1 hour intervals; \n",
    "        #the weather data to be appended has a frequency of 1 hour.\n",
    "        resampled = Pedestrians.resample('60Min');\n",
    "        groupA = resampled.sum();\n",
    "        groupA = groupA['volume'];\n",
    "        groupB = resampled.first();\n",
    "        groupB = groupB.iloc[:, 0:groupB.shape[1]-1]\n",
    "        Pedestrians = pd.concat([groupB, groupA], axis=1, sort=False);\n",
    "        \n",
    "        #Extracting time information\n",
    "        dateTimes = pd.to_datetime(Pedestrians['datetime_bin'], \\\n",
    "                                   dayfirst = True).dt.round('H');\n",
    "        Pedestrians['datetime_bin'] = dateTimes;\n",
    "        Pedestrians.insert(2, 'dateTimeIdx', groupB.index.get_level_values(0))\n",
    "        Pedestrians.insert(3, 'Hour', dateTimes.dt.hour)\n",
    "        Pedestrians.insert(4, 'Day', dateTimes.dt.day)\n",
    "        Pedestrians.insert(5, 'DayOfWeek', dateTimes.dt.dayofweek)\n",
    "        Pedestrians.insert(6, 'DayOfYear', dateTimes.dt.dayofyear)\n",
    "        Pedestrians.insert(7, 'Month', dateTimes.dt.month)\n",
    "        \n",
    "        #Combining traffic data with pedestrian traffic data\n",
    "        Pedestrians = Pedestrians.merge(ToWeather, how = 'inner',\\\n",
    "        left_on = 'dateTimeIdx', right_on = 'date_time')\n",
    "        grouped = Pedestrians.groupby('date_time');\n",
    "        Pedestrians = grouped.first();\n",
    "        \n",
    "        Peds.append(Pedestrians)\n",
    "        \n",
    "        \n",
    "        # For Cyclists\n",
    "        Cyclists = CycsPeds[CycsPeds['classification_uid'] == 2] \n",
    "        #2 represents cyclists\n",
    "        \n",
    "        #Aggregating traffic volume in all directions of travel \n",
    "        #and all legs for a given timestamp\n",
    "        grouped = Cyclists.groupby('DateTimes');\n",
    "        groupA = grouped.sum();\n",
    "        groupA = groupA['volume']; \n",
    "        groupB = grouped.first(); \n",
    "        groupB = groupB.iloc[:, 0:groupB.shape[1]-1];\n",
    "        Cyclists = pd.concat([groupB, groupA], axis=1, sort=False)\n",
    "        \n",
    "        #Aggregating volumes for 1 hour intervals; \n",
    "        #the weather data to be appended has a frequency of 1 hour.\n",
    "        resampled = Cyclists.resample('60Min');\n",
    "        groupA = resampled.sum();\n",
    "        groupA = groupA['volume'];\n",
    "        groupB = resampled.first();\n",
    "        groupB = groupB.iloc[:, 0:groupB.shape[1]-1]\n",
    "        Cyclists = pd.concat([groupB, groupA], axis=1, sort=False);\n",
    "        \n",
    "        #Extracting time information\n",
    "        dateTimes = pd.to_datetime(Cyclists['datetime_bin'], \\\n",
    "                                   dayfirst = True).dt.round('H');\n",
    "        Cyclists['datetime_bin'] = dateTimes;\n",
    "        Cyclists.insert(2, 'dateTimeIdx', groupB.index.get_level_values(0))\n",
    "        Cyclists.insert(3, 'Hour', dateTimes.dt.hour)\n",
    "        Cyclists.insert(4, 'Day', dateTimes.dt.day)\n",
    "        Cyclists.insert(5, 'DayOfWeek', dateTimes.dt.dayofweek)\n",
    "        Cyclists.insert(6, 'DayOfYear', dateTimes.dt.dayofyear)\n",
    "        Cyclists.insert(7, 'Month', dateTimes.dt.month)\n",
    "        \n",
    "        #Combining traffic data with pedestrian traffic data\n",
    "        Cyclists = Pedestrians.merge(ToWeather, how = 'inner',\\\n",
    "        left_on = 'dateTimeIdx', right_on = 'date_time')\n",
    "        grouped = Cyclists.groupby('date_time');\n",
    "        Cyclists = grouped.first();\n",
    "        \n",
    "        Cycs.append(Pedestrians)\n",
    "    \n",
    "    filename = 'PedestriansData.sav'\n",
    "    pickle.dump(Peds, open(filename, 'wb'))\n",
    "    \n",
    "    filename = 'CyclistsData.sav';\n",
    "    pickle.dump(Cycs, open(filename, 'wb'))\n",
    "    \n",
    "    return Peds, Cycs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
